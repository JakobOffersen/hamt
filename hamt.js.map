{"version":3,"sources":["hamt.js"],"names":["hamt","SIZE","BUCKET_SIZE","Math","pow","MASK","MAX_INDEX_NODE","MIN_ARRAY_NODE","nothing","constant","x","defaultValBind","f","defaultValue","arguments","length","hash","type","str","i","len","c","charCodeAt","popcount","hashFragment","shift","h","toBitmap","fromBitmap","bitmap","bit","arrayUpdate","at","v","arr","out","Array","arraySpliceOut","g","arraySpliceIn","LEAF","COLLISION","INDEX","ARRAY","empty","__hamt_isEmpty","isEmptyNode","Leaf","key","value","_modify","Leaf__modify","Collision","children","Collision__modify","IndexedNode","mask","IndexedNode__modify","ArrayNode","size","ArrayNode__modify","isLeaf","node","expand","frag","child","subNodes","count","pack","removed","elements","elem","mergeLeaves","h1","n1","h2","n2","subH1","subH2","updateCollisionList","list","k","newValue","indx","exists","current","newChild","_","Map","root","_root","_size","prototype","__hamt_isMap","setTree","tryGetHash","alt","map","tryGet","getHash","undefined","get","hasHash","has","isMap","isEmpty","modifyHash","newRoot","modify","modifyValueHash","modifyValue","setHash","set","del","removeHash","deleteHash","remove","delete","appk","lazyVisitChildren","lazyVisit","rest","DONE","done","MapIterator","next","v0","Symbol","iterator","visit","buildPairs","entries","buildKeys","keys","buildValues","values","fold","z","m","toVisit","pop","push","forEach","Object","defineProperty","module","exports","define","amd"],"mappings":"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","file":"hamt.js","sourcesContent":["/**\n    @fileOverview Hash Array Mapped Trie.\n\n    Code based on: https://github.com/exclipy/pdata\n*/\nconst hamt = {}; // export\n\n/* Configuration\n ******************************************************************************/\nconst SIZE = 5;\n\nconst BUCKET_SIZE = Math.pow(2, SIZE);\n\nconst MASK = BUCKET_SIZE - 1;\n\nconst MAX_INDEX_NODE = BUCKET_SIZE / 2;\n\nconst MIN_ARRAY_NODE = BUCKET_SIZE / 4;\n\n/*\n ******************************************************************************/\nconst nothing = ({});\n\nconst constant = x => () => x;\n\nconst defaultValBind = (f, defaultValue) =>\n    function(x) {\n        return f(arguments.length === 0 ? defaultValue : x);\n    };\n\n/**\n    Get 32 bit hash of string.\n\n    Based on:\n    http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery\n*/\nconst hash = hamt.hash = str => {\n    const type = typeof str;\n    if (type === 'number')\n        return str;\n    if (type !== 'string')\n        str += '';\n\n    let hash = 0;\n    for (let i = 0, len = str.length; i < len; ++i) {\n        const c = str.charCodeAt(i);\n        hash = (((hash << 5) - hash) + c) | 0;\n    }\n    return hash;\n};\n\n/* Bit Ops\n ******************************************************************************/\n/**\n    Hamming weight.\n\n    Taken from: http://jsperf.com/hamming-weight\n*/\nconst popcount = (x) => {\n    x -= ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += (x >> 8);\n    x += (x >> 16);\n    return (x & 0x7f);\n};\n\nconst hashFragment = (shift, h) =>\n    (h >>> shift) & MASK;\n\nconst toBitmap = x =>\n    1 << x;\n\nconst fromBitmap = (bitmap, bit) =>\n    popcount(bitmap & (bit - 1));\n\n/* Array Ops\n ******************************************************************************/\n/**\n    Set a value in an array.\n\n    @param at Index to change.\n    @param v New value\n    @param arr Array.\n*/\nconst arrayUpdate = (at, v, arr) => {\n    const len = arr.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; ++i)\n        out[i] = arr[i];\n    out[at] = v;\n    return out;\n};\n\n/**\n    Remove a value from an array.\n\n    @param at Index to remove.\n    @param arr Array.\n*/\nconst arraySpliceOut = (at, arr) => {\n    const len = arr.length;\n    const out = new Array(len - 1);\n    let i = 0, g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    ++i;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/**\n    Insert a value into an array.\n\n    @param at Index to insert at.\n    @param v Value to insert,\n    @param arr Array.\n*/\nconst arraySpliceIn = (at, v, arr) => {\n    const len = arr.length;\n    const out = new Array(len + 1);\n    let i = 0, g = 0;\n    while (i < at)\n        out[g++] = arr[i++];\n    out[g++] = v;\n    while (i < len)\n        out[g++] = arr[i++];\n    return out;\n};\n\n/* Node Structures\n ******************************************************************************/\nconst LEAF = 1;\nconst COLLISION = 2;\nconst INDEX = 3;\nconst ARRAY = 4;\n\n/**\n    Empty node.\n*/\nconst empty = ({ __hamt_isEmpty: true });\n\nconst isEmptyNode = x =>\n    x === empty || (x && x.__hamt_isEmpty);\n\n/**\n    Leaf holding a value.\n\n    @member hash Hash of key.\n    @member key Key.\n    @member value Value stored.\n*/\nconst Leaf = (hash, key, value) => ({\n    type: LEAF,\n    hash: hash,\n    key: key,\n    value: value,\n    _modify: Leaf__modify\n});\n\n/**\n    Leaf holding multiple values with the same hash but different keys.\n\n    @member hash Hash of key.\n    @member children Array of collision children node.\n*/\nconst Collision = (hash, children) => ({\n    type: COLLISION,\n    hash: hash,\n    children: children,\n    _modify: Collision__modify\n});\n\n/**\n    Internal node with a sparse set of children.\n\n    Uses a bitmap and array to pack children.\n\n    @member mask Bitmap that encode the positions of children in the array.\n    @member children Array of child nodes.\n*/\nconst IndexedNode = (mask, children) => ({\n    type: INDEX,\n    mask: mask,\n    children: children,\n    _modify: IndexedNode__modify\n});\n\n/**\n    Internal node with many children.\n\n    @member size Number of children.\n    @member children Array of child nodes.\n*/\nconst ArrayNode = (size, children) => ({\n    type: ARRAY,\n    size: size,\n    children: children,\n    _modify: ArrayNode__modify\n});\n\n/**\n    Is `node` a leaf node?\n*/\nconst isLeaf = node =>\n    (node === empty\n        || node.type === LEAF\n        || node.type === COLLISION);\n\n/* Internal node operations.\n ******************************************************************************/\n/**\n    Expand an indexed node into an array node.\n\n    @param frag Index of added child.\n    @param child Added child.\n    @param mask Index node mask before child added.\n    @param subNodes Index node children before child added.\n*/\nconst expand = (frag, child, bitmap, subNodes) => {\n    const arr = [];\n    let bit = bitmap;\n    let count = 0;\n    for (let i = 0; bit; ++i) {\n        if (bit & 1)\n            arr[i] = subNodes[count++];\n        bit >>>= 1;\n    }\n    arr[frag] = child;\n    return ArrayNode(count + 1, arr);\n};\n\n/**\n    Collapse an array node into a indexed node.\n\n    @param count Number of elements in new array.\n    @param removed Index of removed element.\n    @param elements Array node children before remove.\n*/\nconst pack = (count, removed, elements) => {\n    const children = new Array(count - 1);\n    let g = 0;\n    let bitmap = 0;\n    for (let i = 0, len = elements.length; i < len; ++i) {\n        if (i !== removed) {\n            const elem = elements[i];\n            if (elem && !isEmptyNode(elem)) {\n                children[g++] = elem;\n                bitmap |= 1 << i;\n            }\n        }\n    }\n    return IndexedNode(bitmap, children);\n};\n\n/**\n    Merge two leaf nodes.\n\n    @param shift Current shift.\n    @param h1 Node 1 hash.\n    @param n1 Node 1.\n    @param h2 Node 2 hash.\n    @param n2 Node 2.\n*/\nconst mergeLeaves = (shift, h1, n1, h2, n2) => {\n    if (h1 === h2)\n        return Collision(h1, [n2, n1]);\n\n    const subH1 = hashFragment(shift, h1);\n    const subH2 = hashFragment(shift, h2);\n    return IndexedNode(toBitmap(subH1) | toBitmap(subH2),\n        subH1 === subH2\n            ? [mergeLeaves(shift + SIZE, h1, n1, h2, n2)]\n            : subH1 < subH2 ? [n1, n2] : [n2, n1]);\n};\n\n/**\n    Update an entry in a collision list.\n\n    @param hash Hash of collision.\n    @param list Collision list.\n    @param f Update function.\n    @param k Key to update.\n    @param size Size reference\n*/\nconst updateCollisionList = (h, list, f, k, size) => {\n    const len = list.length;\n    for (let i = 0; i < len; ++i) {\n        const child = list[i];\n        if (child.key === k) {\n            const value = child.value;\n            const newValue = f(value);\n            if (newValue === value)\n                return list;\n\n            if (newValue === nothing) {\n                --size.value\n                return arraySpliceOut(i, list);\n            }\n            return arrayUpdate(i, Leaf(h, k, newValue), list);\n        }\n    }\n\n    const newValue = f();\n    if (newValue === nothing)\n        return list;\n    ++size.value;\n    return arrayUpdate(len, Leaf(h, k, newValue), list);\n};\n\n/* Editing\n ******************************************************************************/\nconst Leaf__modify = function(shift, f, h, k, size) {\n    if (k === this.key) {\n        const v = f(this.value);\n        if (v === this.value)\n            return this;\n        if (v === nothing) {\n            --size.value;\n            return empty;\n        }\n        return Leaf(h, k, v);\n    }\n    const v = f();\n    if (v === nothing)\n        return this;\n    ++size.value;\n    return mergeLeaves(shift, this.hash, this, h, Leaf(h, k, v));\n};\n\nconst Collision__modify = function(shift, f, h, k, size) {\n    if (h === this.hash) {\n        const list = updateCollisionList(this.hash, this.children, f, k, size);\n        if (list === this.children)\n            return this;\n\n        return list.length > 1\n            ? Collision(this.hash, list)\n            : list[0]; // collapse single element collision list\n    }\n    const v = f();\n    if (v === nothing)\n        return this;\n    ++size.value;\n    return mergeLeaves(shift, this.hash, this, h, Leaf(h, k, v));\n};\n\nconst IndexedNode__modify = function(shift, f, h, k, size) {\n    const mask = this.mask;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const bit = toBitmap(frag);\n    const indx = fromBitmap(mask, bit);\n    const exists = mask & bit;\n    const current = exists ? children[indx] : empty;\n    const child = current._modify(shift + SIZE, f, h, k, size);\n\n    if (current === child)\n        return this;\n\n    if (exists && isEmptyNode(child)) { // remove\n        const bitmap = mask & ~bit;\n        if (!bitmap)\n            return empty;\n        return children.length <= 2 && isLeaf(children[indx ^ 1])\n            ? children[indx ^ 1] // collapse\n            : IndexedNode(\n                bitmap,\n                arraySpliceOut(indx, children))\n    }\n    if (!exists && !isEmptyNode(child)) { // add\n        return children.length >= MAX_INDEX_NODE\n            ? expand(frag, child, mask, children)\n            : IndexedNode(\n                mask | bit,\n                arraySpliceIn(indx, child, children))\n    }\n\n    // modify\n    return IndexedNode(\n        mask,\n        arrayUpdate(indx, child, children));\n};\n\nconst ArrayNode__modify = function(shift, f, h, k, size) {\n    const count = this.size;\n    const children = this.children;\n    const frag = hashFragment(shift, h);\n    const child = children[frag];\n    const newChild = (child || empty)._modify(shift + SIZE, f, h, k, size);\n\n    if (child === newChild)\n        return this;\n\n    if (isEmptyNode(child) && !isEmptyNode(newChild)) { // add\n        return ArrayNode(\n            count + 1,\n            arrayUpdate(frag, newChild, children))\n    }\n    if (!isEmptyNode(child) && isEmptyNode(newChild)) { // remove\n        return count - 1 <= MIN_ARRAY_NODE\n            ? pack(count, frag, children)\n            : ArrayNode(\n                count - 1,\n                arrayUpdate(frag, empty, children))\n    }\n\n    // modify\n    return ArrayNode(\n        count,\n        arrayUpdate(frag, newChild, children));\n};\n\nempty._modify = (_, f, h, k, size) => {\n    const v = f();\n    if (v === nothing)\n        return empty;\n    ++size.value;\n    return Leaf(h, k, v);\n};\n\n/*\n ******************************************************************************/\nfunction Map(root, size) {\n    this._root = root;\n    this._size = size;\n};\n\nMap.prototype.__hamt_isMap = true;\n\nMap.prototype.setTree = function(root, size) {\n    return root === this._root ? this : new Map(root, size);\n};\n\n/* Queries\n ******************************************************************************/\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `alt` if none.\n*/\nconst tryGetHash = hamt.tryGetHash = (alt, hash, key, map) => {\n    let node = map._root;\n    let shift = 0;\n    while (true) switch (node.type) {\n        case LEAF:\n            {\n                return key === node.key ? node.value : alt;\n            }\n        case COLLISION:\n            {\n                if (hash === node.hash) {\n                    const children = node.children;\n                    for (let i = 0, len = children.length; i < len; ++i) {\n                        const child = children[i];\n                        if (key === child.key)\n                            return child.value;\n                    }\n                }\n                return alt;\n            }\n        case INDEX:\n            {\n                const frag = hashFragment(shift, hash);\n                const bit = toBitmap(frag);\n                if (node.mask & bit) {\n                    node = node.children[fromBitmap(node.mask, bit)]\n                    shift += SIZE;\n                    break;\n                }\n                return alt;\n            }\n        case ARRAY:\n            {\n                node = node.children[hashFragment(shift, hash)];\n                if (node) {\n                    shift += SIZE;\n                    break;\n                }\n                return alt;\n            }\n        default:\n            return alt;\n    }\n};\n\nMap.prototype.tryGetHash = function(alt, hash, key) {\n    return tryGetHash(alt, hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `tryGetHash`\n*/\nconst tryGet = hamt.tryGet = (alt, key, map) =>\n    tryGetHash(alt, hash(key), key, map);\n\nMap.prototype.tryGet = function(alt, key) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using a custom `hash`.\n\n    Returns the value or `undefined` if none.\n*/\nconst getHash = hamt.getHash = (hash, key, map) =>\n    tryGetHash(undefined, hash, key, map);\n\nMap.prototype.getHash = function(hash, key) {\n    return getHash(hash, key, this);\n};\n\n/**\n    Lookup the value for `key` in `map` using internal hash function.\n\n    @see `get`\n*/\nconst get = hamt.get = (key, map) =>\n    tryGetHash(undefined, hash(key), key, map);\n\nMap.prototype.get = function(key, alt) {\n    return tryGet(alt, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses custom `hash`.\n*/\nconst hasHash = hamt.has = (hash, key, map) =>\n    tryGetHash(nothing, hash, key, map) !== nothing;\n\nMap.prototype.hasHash = function(hash, key) {\n    return hasHash(hash, key, this);\n};\n\n/**\n    Does an entry exist for `key` in `map`? Uses internal hash function.\n*/\nconst has = hamt.has = (key, map) =>\n    hasHash(hash(key), key, map);\n\nMap.prototype.has = function(key) {\n    return has(key, this);\n};\n\n/**\n    Empty node.\n*/\nhamt.empty = new Map(empty, 0);\n\n/**\n    Is `value` a map?\n*/\nhamt.isMap = (value) =>\n    !!(value && value.__hamt_isMap);\n\n/**\n    Does `map` contain any elements?\n*/\nhamt.isEmpty = (map) =>\n    !!(hamt.isMap(map) && isEmptyNode(map._root));\n\nMap.prototype.isEmpty = function() {\n    return hamt.isEmpty(this);\n};\n\n\n/* Updates\n ******************************************************************************/\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    custom hash.\n\n    `f` is invoked with the current value for `k` if it exists,\n    or `defaultValue` if it is specified. Otherwise, `f` is invoked with no arguments\n    if no such value exists.\n\n    `modify` will always either update or insert a value into the map.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst modifyHash = hamt.modifyHash = (f, hash, key, map) => {\n    const size = { value: map._size };\n    const newRoot = map._root._modify(0, f, hash, key, size);\n    return map.setTree(newRoot, size.value);\n};\n\nMap.prototype.modifyHash = function(hash, key, f) {\n    return modifyHash(f, hash, key, this);\n};\n\n/**\n    Alter the value stored for `key` in `map` using function `f` using\n    internal hash function.\n\n    @see `modifyHash`\n*/\nconst modify = hamt.modify = (f, key, map) =>\n    modifyHash(f, hash(key), key, map);\n\nMap.prototype.modify = function(key, f) {\n    return modify(f, key, this);\n};\n\n/**\n    Same as `modifyHash`, but invokes `f` with `defaultValue` if no entry exists.\n\n    @see `modifyHash`\n*/\nconst modifyValueHash = hamt.modifyValueHash = (f, defaultValue, hash, key, map) =>\n    modifyHash(defaultValBind(f, defaultValue), hash, key, map);\n\nMap.prototype.modifyValueHash = function(hash, key, f, defaultValue) {\n    return modifyValueHash(f, defaultValue, hash, key, this);\n};\n\n/**\n    @see `modifyValueHash`\n*/\nconst modifyValue = hamt.modifyValue = (f, defaultValue, key, map) =>\n    modifyValueHash(f, defaultValue, hash(key), key, map);\n\nMap.prototype.modifyValue = function(key, f, defaultValue) {\n    return modifyValue(f, defaultValue, key, this);\n};\n\n/**\n    Store `value` for `key` in `map` using custom `hash`.\n\n    Returns a map with the modified value. Does not alter `map`.\n*/\nconst setHash = hamt.setHash = function(hash, key, value, map) {\n    return modifyHash(constant(value), hash, key, map);\n}\n\nMap.prototype.setHash = function(hash, key, value) {\n    return setHash(hash, key, value, this);\n};\n\n/**\n    Store `value` for `key` in `map` using internal hash function.\n\n    @see `setHash`\n*/\nconst set = hamt.set = (key, value, map) =>\n    setHash(hash(key), key, value, map);\n\nMap.prototype.set = function(key, value) {\n    return set(key, value, this);\n};\n\n/**\n    Remove the entry for `key` in `map`.\n\n    Returns a map with the value removed. Does not alter `map`.\n*/\nconst del = constant(nothing);\nconst removeHash = hamt.removeHash = (hash, key, map) =>\n    modifyHash(del, hash, key, map);\n\nMap.prototype.removeHash = Map.prototype.deleteHash = function(hash, key) {\n    return removeHash(hash, key, this);\n};\n\n/**\n    Remove the entry for `key` in `map` using internal hash function.\n\n    @see `removeHash`\n*/\nconst remove = hamt.remove = (key, map) =>\n    removeHash(hash(key), key, map);\n\nMap.prototype.remove = Map.prototype.delete = function(key) {\n    return remove(key, this);\n};\n\n/* Traversal\n ******************************************************************************/\n/**\n    Apply a continuation.\n*/\nconst appk = k =>\n    k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);\n\n/**\n    Recursively visit all values stored in an array of nodes lazily.\n*/\nvar lazyVisitChildren = (len, children, i, f, k) => {\n    while (i < len) {\n        var child = children[i++];\n        if (child && !isEmptyNode(child))\n            return lazyVisit(child, f, [len, children, i, f, k]);\n    }\n    return appk(k);\n};\n\n/**\n    Recursively visit all values stored in `node` lazily.\n*/\nconst lazyVisit = (node, f, k) => {\n    switch (node.type) {\n        case LEAF:\n            return { value: f(node), rest: k };\n\n        case COLLISION:\n        case ARRAY:\n        case INDEX:\n            const children = node.children;\n            return lazyVisitChildren(children.length, children, 0, f, k);\n\n        default:\n            return appk(k);\n    }\n};\n\nconst DONE = { done: true };\n\n/**\n    Javascript iterator over a map.\n*/\nfunction MapIterator(v) {\n    this.v = v;\n};\n\nMapIterator.prototype.next = function() {\n    if (!this.v)\n        return DONE;\n    const v0 = this.v;\n    this.v = appk(v0.rest);\n    return v0;\n};\n\nMapIterator.prototype[Symbol.iterator] = function() {\n    return this;\n};\n\n/**\n    Lazily visit each value in map with function `f`.\n*/\nconst visit = (map, f) =>\n    new MapIterator(lazyVisit(map._root, f));\n\n/**\n    Get a Javascript iterator of `map`.\n\n    Iterates over `[key, value]` arrays.\n*/\nconst buildPairs = (x) => [x.key, x.value];\nconst entries = hamt.entries = (map) =>\n    visit(map, buildPairs);\n\nMap.prototype.entries = Map.prototype[Symbol.iterator] = function() {\n    return entries(this);\n};\n\n/**\n    Get array of all keys in `map`.\n\n    Order is not guaranteed.\n*/\nconst buildKeys = (x) => x.key;\nconst keys = hamt.keys = (map) =>\n    visit(map, buildKeys);\n\nMap.prototype.keys = function() { return keys(this); }\n\n/**\n    Get array of all values in `map`.\n\n    Order is not guaranteed, duplicates are preserved.\n*/\nconst buildValues = x => x.value;\nconst values = hamt.values = Map.prototype.values = map =>\n    visit(map, buildValues);\n\nMap.prototype.values = function() {\n    return values(this);\n};\n\n/* Fold\n ******************************************************************************/\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function mapping accumulated value, value, and key to new value.\n    @param z Starting value.\n    @param m HAMT\n*/\nconst fold = hamt.fold = (f, z, m) => {\n    const root = m._root;\n    if (root.type === LEAF)\n        return f(z, root.value, root.key);\n\n    const toVisit = [root.children];\n    let children;\n    while (children = toVisit.pop()) {\n        for (let i = 0, len = children.length; i < len;) {\n            const child = children[i++];\n            if (child && child.type) {\n                if (child.type === LEAF)\n                    z = f(z, child.value, child.key);\n                else\n                    toVisit.push(child.children);\n            }\n        }\n    }\n    return z;\n};\n\nMap.prototype.fold = function(f, z) {\n    return fold(f, z, this);\n};\n\n/**\n    Visit every entry in the map, aggregating data.\n\n    Order of nodes is not guaranteed.\n\n    @param f Function invoked with value and key\n    @param map HAMT\n*/\nconst forEach = hamt.forEach = (f, map) =>\n    fold((_, value, key) => f(value, key, map), null, map);\n\nMap.prototype.forEach = function(f) {\n    return forEach(f, this);\n};\n\n/* Aggregate\n ******************************************************************************/\n/**\n    Get the number of entries in `map`.\n*/\nconst count = hamt.count = map =>\n    map._size;\n\nMap.prototype.count = function() {\n    return count(this);\n};\n\nObject.defineProperty(Map.prototype, 'size', {\n    get: Map.prototype.count\n});\n\n/* Export\n ******************************************************************************/\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = hamt;\n} else if (typeof define === 'function' && define.amd) {\n    define('hamt', [], () => hamt);\n} else {\n    this.hamt = hamt;\n}\n"]}